local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer

-- Each animation ID now maps to a table with a limb, color, lifetime, and optionally a startDelay.
local animLimbMap = {
	["rbxassetid://10469493270"] = { limb = "RightHand", color = Color3.fromRGB(54, 208, 255), lifetime = 0.4, startDelay = 0 },
	["rbxassetid://10469630950"] = { limb = "LeftHand",  color = Color3.fromRGB(54, 208, 255), lifetime = 0.4, startDelay = 0 },
	["rbxassetid://10469639222"] = { limb = "LeftFoot",  color = Color3.fromRGB(54, 208, 255), lifetime = 0.5, startDelay = 0.1 },
	["rbxassetid://10469643643"] = { limb = "RightHand", color = Color3.fromRGB(54, 208, 255), lifetime = 0.4, startDelay = 0 },
	-- Add additional mappings as needed.
}

local limbHitboxMap = {
	RightHand = "Hitbox_RightArm",
	LeftHand  = "Hitbox_LeftArm",
	RightFoot = "Hitbox_RightLeg",
	LeftFoot  = "Hitbox_LeftLeg",
}

local function fadeTrail(trail, duration)
	local initialSequence = trail.Transparency
	local startTime = tick()
	while tick() - startTime < duration do
		local alpha = (tick() - startTime) / duration
		local newKeypoints = {}
		for _, keypoint in ipairs(initialSequence.Keypoints) do
			local newValue = keypoint.Value + (1 - keypoint.Value) * alpha
			table.insert(newKeypoints, NumberSequenceKeypoint.new(keypoint.Time, newValue))
		end
		trail.Transparency = NumberSequence.new(newKeypoints)
		RunService.Heartbeat:Wait()
	end
	trail.Transparency = NumberSequence.new(1)
end

local function handleAnimation(animationTrack)
	local character = player.Character
	if not character then
		return
	end

	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if not humanoid or humanoid.Health <= 0 then
		return
	end

	local animId = animationTrack.Animation and animationTrack.Animation.AnimationId
	local mapping = animLimbMap[animId]
	if mapping then
		local startDelay = mapping.startDelay or 0
		delay(startDelay, function()
			local limbName = mapping.limb
			local hitboxName = limbHitboxMap[limbName]
			local limbPart = character:FindFirstChild(hitboxName)
			if limbPart then
				local attachment0 = Instance.new("Attachment", limbPart)
				local attachment1 = Instance.new("Attachment", limbPart)
				attachment0.Position = Vector3.new(0, -limbPart.Size.Y, 0)
				attachment1.Position = Vector3.new(0, limbPart.Size.Y, 0)

				local trail = Instance.new("Trail", limbPart)
				trail.Attachment0 = attachment0
				trail.Attachment1 = attachment1
				trail.Color = ColorSequence.new(mapping.color)
				trail.WidthScale = NumberSequence.new(20)
				trail.Lifetime = mapping.lifetime

				local coloredPart = Instance.new("Part")
				coloredPart.Size = Vector3.new(1.12, 1.12, 1.12)
				coloredPart.Color = mapping.color
				coloredPart.Transparency = 0
				coloredPart.Material = Enum.Material.SmoothPlastic
				coloredPart.CanCollide = false
				coloredPart.CFrame = limbPart.CFrame
				coloredPart.Parent = limbPart

				local weld = Instance.new("WeldConstraint", coloredPart)
				weld.Part0 = limbPart
				weld.Part1 = coloredPart

				local fadeTime = mapping.lifetime
				local tweenInfo = TweenInfo.new(fadeTime, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
				local partTween = TweenService:Create(coloredPart, tweenInfo, { Transparency = 1 })
				partTween:Play()

				spawn(function()
					fadeTrail(trail, fadeTime)
				end)

				delay(fadeTime + 0.1, function()
					if trail then
						trail:Destroy()
					end
					if attachment0 then
						attachment0:Destroy()
					end
					if attachment1 then
						attachment1:Destroy()
					end
					if weld then
						weld:Destroy()
					end
					if coloredPart then
						coloredPart:Destroy()
					end
				end)
			end
		end)
	end
end

local function onCharacterAdded(character)
	local humanoid = character:WaitForChild("Humanoid")
	humanoid.AnimationPlayed:Connect(handleAnimation)
end

if player.Character then
	onCharacterAdded(player.Character)
end
